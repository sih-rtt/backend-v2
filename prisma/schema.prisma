/// This file provides a relational schema for postgreSQL using prisma ORM. 

// Generator to generate a type-safe client according to the schema
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "darwin-arm64"]
}

// Defines DB connections
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis(version: "3.4.0")]
}

model Conductor {
  id          String    @id @default(cuid())
  conductorId String    @unique
  password    String
  fullName    String
  gender      String
  phoneNumber String
  address     Json?     @db.Json
  sessions    Session[]
}

model Session {
  id                Int                                        @id @default(autoincrement())
  routeId           String
  route             Route                                      @relation(fields: [routeId], references: [id])
  busId             String
  bus               Bus                                        @relation(fields: [busId], references: [id])
  tickets           Ticket[]
  conductorId       String
  conductor         Conductor                                  @relation(fields: [conductorId], references: [id])
  startTime         DateTime                                   @default(now())
  endTime           DateTime?
  polyline          Unsupported("geometry(LINESTRING, 4326)")?
  status            String                                     @default("ongoing")
  startLocation     Unsupported("geometry(POINT, 4326)")
  endLocation       Unsupported("geometry(POINT, 4326)")?
  startLocationName String
  endLocationName   String?

  @@index([startLocation, endLocation], name: "session_idx", type: BTree)
}

model Bus {
  id       String        @id @default(cuid())
  regNo    String        @unique
  busStops BusStop[]
  sessions Session[]
  busNo    String
  routeId  String
  route    CombinedRoute @relation(fields: [routeId], references: [id])
  type     String
  info     Json          @db.Json
}

model BusStop {
  id       String                               @id @default(cuid())
  refId    BigInt                               @unique
  location Unsupported("geometry(POINT, 4326)")
  name     String
  buses    Bus[]
  routes   BusStopsInRoute[]

  @@index([location], name: "location_idx", type: BTree)
  @@index(fields: [id], type: BTree)
}

model Ticket {
  id         String    @id @default(cuid())
  sessionId  Int?
  session    Session?  @relation(fields: [sessionId], references: [id])
  from       String
  to         String
  createdAt  DateTime  @default(now())
  verifiedAt DateTime?
  userId     String
  user       User      @relation(fields: [userId], references: [id])
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  fullName    String   @db.VarChar(100)
  gender      String?
  phoneNumber String?  @unique @db.VarChar(10)
  address     Json?    @db.Json
  tickets     Ticket[]

  @@index(fields: [id], type: BTree)
}

model Route {
  id            String            @id @default(cuid())
  refId         BigInt            @unique
  from          String?
  fromLocation  Unsupported("geometry(POINT, 4326)")?
  to            String?
  toLocation    Unsupported("geometry(POINT, 4326)")?
  busStops      BusStopsInRoute[]
  sessions      Session[]
  busesOnTouteA CombinedRoute[]   @relation(name: "routeA")
  busesOnRouteB CombinedRoute[]   @relation(name: "routeB")

  @@index(fields: [id], type: BTree)
}

model CombinedRoute {
  id       String  @id @default(cuid())
  busRef   String  @unique
  routeIdA BigInt
  routeA   Route   @relation(fields: [routeIdA], references: [refId], name: "routeA")
  routeIdB BigInt?
  routeB   Route?  @relation(fields: [routeIdB], references: [refId], name: "routeB")
  bus      Bus[]

  @@index(fields: [id], type: BTree)
}

model BusStopsInRoute {
  id           String  @id @default(cuid())
  busStopRefId BigInt
  busStop      BusStop @relation(fields: [busStopRefId], references: [refId])
  routeRefId   BigInt
  route        Route   @relation(fields: [routeRefId], references: [refId])
}
