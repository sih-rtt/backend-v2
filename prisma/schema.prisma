/// This file provides a relational schema for postgreSQL using prisma ORM. 

// Generator to generate a type-safe client according to the schema
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// Defines DB connections
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis(version: "3.4.0")]
}

model Conductor {
  id          String    @id @default(cuid())
  conductorId String    @unique
  password    String
  fullName    String
  gender      String
  phoneNumber String    @db.VarChar(10)
  address     Json?     @db.Json
  sessions    Session[]
}

model Session {
  id            Int                                        @id @default(autoincrement())
  busId         String
  bus           Bus                                        @relation(fields: [busId], references: [id])
  tickets       Ticket[]
  conductorId   String
  conductor     Conductor                                  @relation(fields: [conductorId], references: [id])
  startTime     DateTime                                   @default(now())
  endTime       DateTime?
  polyline      Unsupported("geometry(LINESTRING, 4326)")?
  status        String                                     @default("ongoing")
  startLocation Unsupported("geometry(POINT, 4326)")
  endLocation   Unsupported("geometry(POINT, 4326)")?

  @@index([polyline, startLocation, endLocation], name: "session_idx", type: BTree)
}

model Bus {
  id       String    @id @default(cuid())
  regNo    String    @unique
  busStops BusStop[]
  sessions Session[]
  busNo    String
  routeId  String
  route    Route     @relation(fields: [routeId], references: [id])
  type     String
  info     Json      @db.Json
}

model BusStop {
  id       String                               @id @default(cuid())
  location Unsupported("geometry(POINT, 4326)")
  name     String                               @db.VarChar(30)
  buses    Bus[]

  @@index([location], name: "location_idx", type: BTree)
}

model Ticket {
  id         String    @id @default(cuid())
  sessionId  Int?
  session    Session?  @relation(fields: [sessionId], references: [id])
  from       String
  to         String
  createdAt  DateTime  @default(now())
  verifiedAt DateTime?
  userId     String
  user       User      @relation(fields: [userId], references: [id])
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  fullName    String   @db.VarChar(100)
  gender      String?
  phoneNumber String?  @unique @db.VarChar(10)
  address     Json?    @db.Json
  tickets     Ticket[]

  @@index(fields: [id], type: BTree)
}

model Route {
  id     String @id
  routes Json   @db.Json
  buses  Bus[]
}
